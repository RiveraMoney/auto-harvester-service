{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvestRunId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numVaultsHarvested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "retVaults",
          "type": "address[]"
        }
      ],
      "name": "HarvestRun",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NewWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "RemoveWhitelist",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "retVaults",
          "type": "address[]"
        }
      ],
      "name": "harvestVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "newWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x6080604052600160025534801561001557600080fd5b5061001f33610024565b610074565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6107fd806100836000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639674ca6e1161005b5780639674ca6e146100bf5780639b19251a146100d2578063f2fde38b14610105578063ff3407cf1461011857600080fd5b8063715018a61461008257806378c8cda71461008c5780638da5cb5b1461009f575b600080fd5b61008a61012b565b005b61008a61009a366004610610565b61013f565b6000546040516001600160a01b0390911681526020015b60405180910390f35b61008a6100cd366004610610565b610216565b6100f56100e0366004610610565b60016020526000908152604090205460ff1681565b60405190151581526020016100b6565b61008a610113366004610610565b6102e9565b61008a61012636600461064a565b610362565b6101336104e2565b61013d600061053c565b565b6101476104e2565b6001600160a01b03811660009081526001602052604090205460ff166101c65760405162461bcd60e51b815260206004820152602960248201527f57686974656c69737446696c7465723a2052656d6f76696e67204e6f6e2057686044820152681a5d195b1a5cdd195960ba1b60648201526084015b60405180910390fd5b6001600160a01b03818116600081815260016020526040808220805460ff19169055815490519316927f403c5e5cf4d35483fc4491cc180e7c00fd44449e95dc52cf2f470d8c02699f659190a350565b61021e6104e2565b6001600160a01b03811660009081526001602052604090205460ff16156102935760405162461bcd60e51b8152602060048201526024808201527f57686974656c69737446696c7465723a20416c72656164792057686974656c696044820152631cdd195960e21b60648201526084016101bd565b6001600160a01b038181166000818152600160208190526040808320805460ff1916909217909155815490519316927f74dd9d466f35e6d6ff9fa8b6ba203f926982ab037ba5d8e8457a0a9516e27e149190a350565b6102f16104e2565b6001600160a01b0381166103565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101bd565b61035f8161053c565b50565b61036a61058c565b60005b815181101561048f5760006001600160a01b03168282815181106103935761039361070f565b60200260200101516001600160a01b0316031561048f5760008282815181106103be576103be61070f565b60200260200101516001600160a01b031663a8c62e766040518163ffffffff1660e01b8152600401602060405180830381865afa158015610403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104279190610725565b9050806001600160a01b0316634641257d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561046457600080fd5b505af1158015610478573d6000803e3d6000fd5b50505050508061048781610742565b91505061036d565b50600280547f11a51afe105110c7ce3768d36a5a4a73df4c20fa73a8f1471ab6e024765055fc9160006104c183610742565b919050558251836040516104d793929190610769565b60405180910390a150565b6000546001600160a01b0316331461013d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101bd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526001602052604090205460ff1661013d5760405162461bcd60e51b815260206004820152601d60248201527f57686974656c69737446696c7465723a202177686974656c697374656400000060448201526064016101bd565b6001600160a01b038116811461035f57600080fd5b803561060b816105eb565b919050565b60006020828403121561062257600080fd5b813561062d816105eb565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561065d57600080fd5b823567ffffffffffffffff8082111561067557600080fd5b818501915085601f83011261068957600080fd5b81358181111561069b5761069b610634565b8060051b604051601f19603f830116810181811085821117156106c0576106c0610634565b6040529182528482019250838101850191888311156106de57600080fd5b938501935b82851015610703576106f485610600565b845293850193928501926106e3565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561073757600080fd5b815161062d816105eb565b60006001820161076257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b818110156107b95784516001600160a01b031683529383019391830191600101610794565b50909897505050505050505056fea2646970667358221220599933224be93902d61dc54d09e9c61d1df915333b7ae387414641d1d36962dd64736f6c63430008130033",
    "sourceMap": "187:646:1:-:0;;;254:1;231:24;;187:646;;;;;;;;;-1:-1:-1;936:32:29;719:10:30;936:18:29;:32::i;:::-;187:646:1;;2433:187:29;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:29;;;-1:-1:-1;;;;;;2541:17:29;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;187:646:1:-;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80639674ca6e1161005b5780639674ca6e146100bf5780639b19251a146100d2578063f2fde38b14610105578063ff3407cf1461011857600080fd5b8063715018a61461008257806378c8cda71461008c5780638da5cb5b1461009f575b600080fd5b61008a61012b565b005b61008a61009a366004610610565b61013f565b6000546040516001600160a01b0390911681526020015b60405180910390f35b61008a6100cd366004610610565b610216565b6100f56100e0366004610610565b60016020526000908152604090205460ff1681565b60405190151581526020016100b6565b61008a610113366004610610565b6102e9565b61008a61012636600461064a565b610362565b6101336104e2565b61013d600061053c565b565b6101476104e2565b6001600160a01b03811660009081526001602052604090205460ff166101c65760405162461bcd60e51b815260206004820152602960248201527f57686974656c69737446696c7465723a2052656d6f76696e67204e6f6e2057686044820152681a5d195b1a5cdd195960ba1b60648201526084015b60405180910390fd5b6001600160a01b03818116600081815260016020526040808220805460ff19169055815490519316927f403c5e5cf4d35483fc4491cc180e7c00fd44449e95dc52cf2f470d8c02699f659190a350565b61021e6104e2565b6001600160a01b03811660009081526001602052604090205460ff16156102935760405162461bcd60e51b8152602060048201526024808201527f57686974656c69737446696c7465723a20416c72656164792057686974656c696044820152631cdd195960e21b60648201526084016101bd565b6001600160a01b038181166000818152600160208190526040808320805460ff1916909217909155815490519316927f74dd9d466f35e6d6ff9fa8b6ba203f926982ab037ba5d8e8457a0a9516e27e149190a350565b6102f16104e2565b6001600160a01b0381166103565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101bd565b61035f8161053c565b50565b61036a61058c565b60005b815181101561048f5760006001600160a01b03168282815181106103935761039361070f565b60200260200101516001600160a01b0316031561048f5760008282815181106103be576103be61070f565b60200260200101516001600160a01b031663a8c62e766040518163ffffffff1660e01b8152600401602060405180830381865afa158015610403573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104279190610725565b9050806001600160a01b0316634641257d6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561046457600080fd5b505af1158015610478573d6000803e3d6000fd5b50505050508061048781610742565b91505061036d565b50600280547f11a51afe105110c7ce3768d36a5a4a73df4c20fa73a8f1471ab6e024765055fc9160006104c183610742565b919050558251836040516104d793929190610769565b60405180910390a150565b6000546001600160a01b0316331461013d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101bd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b3360009081526001602052604090205460ff1661013d5760405162461bcd60e51b815260206004820152601d60248201527f57686974656c69737446696c7465723a202177686974656c697374656400000060448201526064016101bd565b6001600160a01b038116811461035f57600080fd5b803561060b816105eb565b919050565b60006020828403121561062257600080fd5b813561062d816105eb565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561065d57600080fd5b823567ffffffffffffffff8082111561067557600080fd5b818501915085601f83011261068957600080fd5b81358181111561069b5761069b610634565b8060051b604051601f19603f830116810181811085821117156106c0576106c0610634565b6040529182528482019250838101850191888311156106de57600080fd5b938501935b82851015610703576106f485610600565b845293850193928501926106e3565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561073757600080fd5b815161062d816105eb565b60006001820161076257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000606082018583526020858185015260606040850152818551808452608086019150828701935060005b818110156107b95784516001600160a01b031683529383019391830191600101610794565b50909897505050505050505056fea2646970667358221220599933224be93902d61dc54d09e9c61d1df915333b7ae387414641d1d36962dd64736f6c63430008130033",
    "sourceMap": "187:646:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1831:101:29;;;:::i;:::-;;807:230:13;;;;;;:::i;:::-;;:::i;1201:85:29:-;1247:7;1273:6;1201:85;;-1:-1:-1;;;;;1273:6:29;;;687:51:45;;675:2;660:18;1201:85:29;;;;;;;;582:219:13;;;;;;:::i;:::-;;:::i;179:41::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;914:14:45;;907:22;889:41;;877:2;862:18;179:41:13;749:187:45;2081:198:29;;;;;;:::i;:::-;;:::i;356:475:1:-;;;;;;:::i;:::-;;:::i;1831:101:29:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;807:230:13:-;1094:13:29;:11;:13::i;:::-;-1:-1:-1;;;;;891:15:13;::::1;;::::0;;;:9:::1;:15;::::0;;;;;::::1;;883:69;;;::::0;-1:-1:-1;;;883:69:13;;2401:2:45;883:69:13::1;::::0;::::1;2383:21:45::0;2440:2;2420:18;;;2413:30;2479:34;2459:18;;;2452:62;-1:-1:-1;;;2530:18:45;;;2523:39;2579:19;;883:69:13::1;;;;;;;;;-1:-1:-1::0;;;;;962:15:13;;::::1;980:5;962:15:::0;;;:9:::1;:15;::::0;;;;;:23;;-1:-1:-1;;962:23:13::1;::::0;;1273:6:29;;1000:30:13;;1273:6:29;;;1000:30:13::1;::::0;980:5;1000:30:::1;807:230:::0;:::o;582:219::-;1094:13:29;:11;:13::i;:::-;-1:-1:-1;;;;;664:15:13;::::1;;::::0;;;:9:::1;:15;::::0;;;;;::::1;;663:16;655:65;;;::::0;-1:-1:-1;;;655:65:13;;2811:2:45;655:65:13::1;::::0;::::1;2793:21:45::0;2850:2;2830:18;;;2823:30;2889:34;2869:18;;;2862:62;-1:-1:-1;;;2940:18:45;;;2933:34;2984:19;;655:65:13::1;2609:400:45::0;655:65:13::1;-1:-1:-1::0;;;;;730:15:13;;::::1;;::::0;;;748:4:::1;730:15;::::0;;;;;;;:22;;-1:-1:-1;;730:22:13::1;::::0;;::::1;::::0;;;1273:6:29;;767:27:13;;1273:6:29;;;767:27:13::1;::::0;730:15;767:27:::1;582:219:::0;:::o;2081:198:29:-;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:29;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:29;;3216:2:45;2161:73:29::1;::::0;::::1;3198:21:45::0;3255:2;3235:18;;;3228:30;3294:34;3274:18;;;3267:62;-1:-1:-1;;;3345:18:45;;;3338:36;3391:19;;2161:73:29::1;3014:402:45::0;2161:73:29::1;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;356:475:1:-;406:17:13;:15;:17::i;:::-;444:9:1::1;439:316;463:9;:16;459:1;:20;439:316;;;528:1;-1:-1:-1::0;;;;;504:26:1::1;:9;514:1;504:12;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1::0;;;;;504:26:1::1;::::0;500:245;550:5:::1;500:245;594:24;651:9;661:1;651:12;;;;;;;;:::i;:::-;;;;;;;-1:-1:-1::0;;;;;621:52:1::1;;:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;594:81;;703:16;-1:-1:-1::0;;;;;693:35:1::1;;:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;576:169;481:3:::0;::::1;::::0;::::1;:::i;:::-;;;;439:316;;;-1:-1:-1::0;780:12:1::1;:14:::0;;769:55:::1;::::0;780:12:::1;:14;::::0;::::1;:::i;:::-;;;;;796:9;:16;814:9;769:55;;;;;;;;:::i;:::-;;;;;;;;356:475:::0;:::o;1359:130:29:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:29;719:10:30;1422:23:29;1414:68;;;;-1:-1:-1;;;1414:68:29;;5054:2:45;1414:68:29;;;5036:21:45;;;5073:18;;;5066:30;5132:34;5112:18;;;5105:62;5184:18;;1414:68:29;4852:356:45;2433:187:29;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:29;;;-1:-1:-1;;;;;;2541:17:29;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;447:129:13:-;524:10;514:21;;;;:9;:21;;;;;;;;506:63;;;;-1:-1:-1;;;506:63:13;;5415:2:45;506:63:13;;;5397:21:45;5454:2;5434:18;;;5427:30;5493:31;5473:18;;;5466:59;5542:18;;506:63:13;5213:353:45;14:131;-1:-1:-1;;;;;89:31:45;;79:42;;69:70;;135:1;132;125:12;150:134;218:20;;247:31;218:20;247:31;:::i;:::-;150:134;;;:::o;289:247::-;348:6;401:2;389:9;380:7;376:23;372:32;369:52;;;417:1;414;407:12;369:52;456:9;443:23;475:31;500:5;475:31;:::i;:::-;525:5;289:247;-1:-1:-1;;;289:247:45:o;941:127::-;1002:10;997:3;993:20;990:1;983:31;1033:4;1030:1;1023:15;1057:4;1054:1;1047:15;1073:1121;1157:6;1188:2;1231;1219:9;1210:7;1206:23;1202:32;1199:52;;;1247:1;1244;1237:12;1199:52;1287:9;1274:23;1316:18;1357:2;1349:6;1346:14;1343:34;;;1373:1;1370;1363:12;1343:34;1411:6;1400:9;1396:22;1386:32;;1456:7;1449:4;1445:2;1441:13;1437:27;1427:55;;1478:1;1475;1468:12;1427:55;1514:2;1501:16;1536:2;1532;1529:10;1526:36;;;1542:18;;:::i;:::-;1588:2;1585:1;1581:10;1620:2;1614:9;1683:2;1679:7;1674:2;1670;1666:11;1662:25;1654:6;1650:38;1738:6;1726:10;1723:22;1718:2;1706:10;1703:18;1700:46;1697:72;;;1749:18;;:::i;:::-;1785:2;1778:22;1835:18;;;1869:15;;;;-1:-1:-1;1911:11:45;;;1907:20;;;1939:19;;;1936:39;;;1971:1;1968;1961:12;1936:39;1995:11;;;;2015:148;2031:6;2026:3;2023:15;2015:148;;;2097:23;2116:3;2097:23;:::i;:::-;2085:36;;2048:12;;;;2141;;;;2015:148;;;2182:6;1073:1121;-1:-1:-1;;;;;;;;1073:1121:45:o;3421:127::-;3482:10;3477:3;3473:20;3470:1;3463:31;3513:4;3510:1;3503:15;3537:4;3534:1;3527:15;3553:251;3623:6;3676:2;3664:9;3655:7;3651:23;3647:32;3644:52;;;3692:1;3689;3682:12;3644:52;3724:9;3718:16;3743:31;3768:5;3743:31;:::i;3809:232::-;3848:3;3869:17;;;3866:140;;3928:10;3923:3;3919:20;3916:1;3909:31;3963:4;3960:1;3953:15;3991:4;3988:1;3981:15;3866:140;-1:-1:-1;4033:1:45;4022:13;;3809:232::o;4046:801::-;4244:4;4292:2;4281:9;4277:18;4322:6;4311:9;4304:25;4348:2;4386:6;4381:2;4370:9;4366:18;4359:34;4429:2;4424;4413:9;4409:18;4402:30;4452:6;4487;4481:13;4518:6;4510;4503:22;4556:3;4545:9;4541:19;4534:26;;4595:2;4587:6;4583:15;4569:29;;4616:1;4626:195;4640:6;4637:1;4634:13;4626:195;;;4705:13;;-1:-1:-1;;;;;4701:39:45;4689:52;;4796:15;;;;4761:12;;;;4737:1;4655:9;4626:195;;;-1:-1:-1;4838:3:45;;4046:801;-1:-1:-1;;;;;;;;4046:801:45:o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "harvestVault(address[])": "ff3407cf",
    "newWhitelist(address)": "9674ca6e",
    "owner()": "8da5cb5b",
    "removeWhitelist(address)": "78c8cda7",
    "renounceOwnership()": "715018a6",
    "transferOwnership(address)": "f2fde38b",
    "whitelist(address)": "9b19251a"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestRunId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numVaultsHarvested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"retVaults\",\"type\":\"address[]\"}],\"name\":\"HarvestRun\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"RemoveWhitelist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"retVaults\",\"type\":\"address[]\"}],\"name\":\"harvestVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"newWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Harvester.sol\":\"Harvester\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=lib/pancake-v3-contracts/node_modules/@chainlink/\",\":@ensdomains/=lib/pancake-v3-contracts/node_modules/@ensdomains/\",\":@eth-optimism/=lib/pancake-v3-contracts/node_modules/@eth-optimism/contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts//contracts/\",\":@pancakeswap-v2-core/=lib/pancake-swap-core/contracts/\",\":@pancakeswap-v2-exchange-protocol/=lib/pancake-smart-contracts/projects/exchange-protocol/contracts/\",\":@pancakeswap-v3-core/=lib/pancake-v3-contracts/projects/v3-core/contracts/\",\":@pancakeswap-v3-masterchef/=lib/pancake-v3-contracts/projects/masterchef-v3/contracts/\",\":@pancakeswap-v3-periphery/=lib/pancake-v3-contracts/projects/v3-periphery/contracts/\",\":@pancakeswap-v3-router/=lib/pancake-v3-contracts/projects/router/contracts/\",\":@pancakeswap/=lib/pancake-v3-contracts/projects/\",\":@rivera/=src/\",\":@uniswap/=lib/pancake-v3-contracts/node_modules/@uniswap/\",\":@uniswap/v3-core/=lib/v3-core/\",\":@uniswap/v3-periphery/=lib/v3-periphery/\",\":base64-sol/=lib/pancake-v3-contracts/node_modules/base64-sol/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/erc4626-tests/\",\":eth-gas-reporter/=lib/pancake-v3-contracts/node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=lib/pancake-v3-contracts/node_modules/hardhat/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":pancake-smart-contracts/=lib/pancake-smart-contracts/\",\":pancake-swap-core/=lib/pancake-swap-core/contracts/\",\":pancake-v3-contracts/=lib/pancake-v3-contracts/\",\":solmate/=lib/solmate/src/\",\":v3-core/=lib/v3-core/\",\":v3-periphery/=lib/v3-periphery/contracts/\"]},\"sources\":{\"contracts/Harvester.sol\":{\"keccak256\":\"0xa30fa1bdc42634877d7b2c4de62f48503867b6b4cbfde8f4931286cab89fbfc8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b892dade3c457000c32f866fed305a233364487b8c787edc4d7e805403b5872\",\"dweb:/ipfs/QmZwgNcCaNznxpjH6WbK5CVMAcsDfiCd56s2atti862W7Z\"]},\"contracts/interfaces/IRiveraAutoCompoundingVaultV2.sol\":{\"keccak256\":\"0x4500272494069aeb052d2a2b898331bdd5cb9793413d66f719e4bba69b1bf874\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f115cc393cee401bde52f961c02a79275fd9cba47fe7617ee31822374f2fc4ca\",\"dweb:/ipfs/QmPQper23q7qcCfbmJNkD5gaJ4bxemuHvZbDFeSMeEhkoV\"]},\"contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0xbb99c37d2b4a25aaacb9924d99a5f6417367d6455c059325fa28967759e3cf3e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3cc498e3f01f24898de5993b25f49357563035f1d531285357e71bd7eba5d5a6\",\"dweb:/ipfs/QmUiXypcpYBxQPNhNzK35FBHyYvmq9zkFLryL7Fh1YKgm8\"]},\"contracts/lib/WhitelistFilter.sol\":{\"keccak256\":\"0x333de072ee61b6fc0ca52da4205832c1502dbe8bf029f6f62d69d62d4c8f6a82\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://592cacdcc9268008a4ad1c162b19682b18b097d9e31f07601cc610ca39761778\",\"dweb:/ipfs/QmWp4fRuA8XCkuXjc9fiVoLARWdnRYiFwvm6jRm7bvX5Cr\"]},\"lib/openzeppelin-contracts//contracts/access/Ownable.sol\":{\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2\",\"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y\"]},\"lib/openzeppelin-contracts//contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "harvestRunId",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "numVaultsHarvested",
              "type": "uint256",
              "indexed": false
            },
            {
              "internalType": "address[]",
              "name": "retVaults",
              "type": "address[]",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "HarvestRun",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "NewWhitelist",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "previousOwner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "OwnershipTransferred",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "RemoveWhitelist",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "retVaults",
              "type": "address[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "harvestVault"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "newWhitelist"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeWhitelist"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "renounceOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferOwnership"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "whitelist",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        ":@chainlink/=lib/pancake-v3-contracts/node_modules/@chainlink/",
        ":@ensdomains/=lib/pancake-v3-contracts/node_modules/@ensdomains/",
        ":@eth-optimism/=lib/pancake-v3-contracts/node_modules/@eth-optimism/contracts/",
        ":@openzeppelin/=lib/openzeppelin-contracts/contracts/",
        ":@openzeppelin/contracts/=lib/openzeppelin-contracts//contracts/",
        ":@pancakeswap-v2-core/=lib/pancake-swap-core/contracts/",
        ":@pancakeswap-v2-exchange-protocol/=lib/pancake-smart-contracts/projects/exchange-protocol/contracts/",
        ":@pancakeswap-v3-core/=lib/pancake-v3-contracts/projects/v3-core/contracts/",
        ":@pancakeswap-v3-masterchef/=lib/pancake-v3-contracts/projects/masterchef-v3/contracts/",
        ":@pancakeswap-v3-periphery/=lib/pancake-v3-contracts/projects/v3-periphery/contracts/",
        ":@pancakeswap-v3-router/=lib/pancake-v3-contracts/projects/router/contracts/",
        ":@pancakeswap/=lib/pancake-v3-contracts/projects/",
        ":@rivera/=src/",
        ":@uniswap/=lib/pancake-v3-contracts/node_modules/@uniswap/",
        ":@uniswap/v3-core/=lib/v3-core/",
        ":@uniswap/v3-periphery/=lib/v3-periphery/",
        ":base64-sol/=lib/pancake-v3-contracts/node_modules/base64-sol/",
        ":ds-test/=lib/forge-std/lib/ds-test/src/",
        ":erc4626-tests/=lib/erc4626-tests/",
        ":eth-gas-reporter/=lib/pancake-v3-contracts/node_modules/eth-gas-reporter/",
        ":forge-std/=lib/forge-std/src/",
        ":hardhat/=lib/pancake-v3-contracts/node_modules/hardhat/",
        ":openzeppelin-contracts/=lib/openzeppelin-contracts/",
        ":pancake-smart-contracts/=lib/pancake-smart-contracts/",
        ":pancake-swap-core/=lib/pancake-swap-core/contracts/",
        ":pancake-v3-contracts/=lib/pancake-v3-contracts/",
        ":solmate/=lib/solmate/src/",
        ":v3-core/=lib/v3-core/",
        ":v3-periphery/=lib/v3-periphery/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "contracts/Harvester.sol": "Harvester"
      },
      "libraries": {}
    },
    "sources": {
      "contracts/Harvester.sol": {
        "keccak256": "0xa30fa1bdc42634877d7b2c4de62f48503867b6b4cbfde8f4931286cab89fbfc8",
        "urls": [
          "bzz-raw://0b892dade3c457000c32f866fed305a233364487b8c787edc4d7e805403b5872",
          "dweb:/ipfs/QmZwgNcCaNznxpjH6WbK5CVMAcsDfiCd56s2atti862W7Z"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IRiveraAutoCompoundingVaultV2.sol": {
        "keccak256": "0x4500272494069aeb052d2a2b898331bdd5cb9793413d66f719e4bba69b1bf874",
        "urls": [
          "bzz-raw://f115cc393cee401bde52f961c02a79275fd9cba47fe7617ee31822374f2fc4ca",
          "dweb:/ipfs/QmPQper23q7qcCfbmJNkD5gaJ4bxemuHvZbDFeSMeEhkoV"
        ],
        "license": "MIT"
      },
      "contracts/interfaces/IStrategy.sol": {
        "keccak256": "0xbb99c37d2b4a25aaacb9924d99a5f6417367d6455c059325fa28967759e3cf3e",
        "urls": [
          "bzz-raw://3cc498e3f01f24898de5993b25f49357563035f1d531285357e71bd7eba5d5a6",
          "dweb:/ipfs/QmUiXypcpYBxQPNhNzK35FBHyYvmq9zkFLryL7Fh1YKgm8"
        ],
        "license": "MIT"
      },
      "contracts/lib/WhitelistFilter.sol": {
        "keccak256": "0x333de072ee61b6fc0ca52da4205832c1502dbe8bf029f6f62d69d62d4c8f6a82",
        "urls": [
          "bzz-raw://592cacdcc9268008a4ad1c162b19682b18b097d9e31f07601cc610ca39761778",
          "dweb:/ipfs/QmWp4fRuA8XCkuXjc9fiVoLARWdnRYiFwvm6jRm7bvX5Cr"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts//contracts/access/Ownable.sol": {
        "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
        "urls": [
          "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
          "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts//contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "contracts/Harvester.sol",
    "id": 88,
    "exportedSymbols": {
      "Harvester": [
        87
      ],
      "IRiveraAutoCompoundingVaultV2": [
        832
      ],
      "IStrategy": [
        989
      ],
      "Ownable": [
        28849
      ],
      "WhitelistFilter": [
        1203
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:802:1",
    "nodes": [
      {
        "id": 11,
        "nodeType": "PragmaDirective",
        "src": "32:23:1",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 12,
        "nodeType": "ImportDirective",
        "src": "56:36:1",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IStrategy.sol",
        "file": "./interfaces/IStrategy.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 88,
        "sourceUnit": 990,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 13,
        "nodeType": "ImportDirective",
        "src": "93:56:1",
        "nodes": [],
        "absolutePath": "contracts/interfaces/IRiveraAutoCompoundingVaultV2.sol",
        "file": "./interfaces/IRiveraAutoCompoundingVaultV2.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 88,
        "sourceUnit": 833,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 14,
        "nodeType": "ImportDirective",
        "src": "150:35:1",
        "nodes": [],
        "absolutePath": "contracts/lib/WhitelistFilter.sol",
        "file": "./lib/WhitelistFilter.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 88,
        "sourceUnit": 1204,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 87,
        "nodeType": "ContractDefinition",
        "src": "187:646:1",
        "nodes": [
          {
            "id": 19,
            "nodeType": "VariableDeclaration",
            "src": "231:24:1",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "harvestRunId",
            "nameLocation": "239:12:1",
            "scope": 87,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 17,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "231:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 18,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "254:1:1",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "internal"
          },
          {
            "id": 28,
            "nodeType": "EventDefinition",
            "src": "262:88:1",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "11a51afe105110c7ce3768d36a5a4a73df4c20fa73a8f1471ab6e024765055fc",
            "name": "HarvestRun",
            "nameLocation": "268:10:1",
            "parameters": {
              "id": 27,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 21,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "harvestRunId",
                  "nameLocation": "287:12:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "279:20:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 20,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "279:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 23,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "numVaultsHarvested",
                  "nameLocation": "309:18:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "301:26:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 22,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "301:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 26,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "retVaults",
                  "nameLocation": "339:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 28,
                  "src": "329:19:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 24,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "329:7:1",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 25,
                    "nodeType": "ArrayTypeName",
                    "src": "329:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "278:71:1"
            }
          },
          {
            "id": 86,
            "nodeType": "FunctionDefinition",
            "src": "356:475:1",
            "nodes": [],
            "body": {
              "id": 85,
              "nodeType": "Block",
              "src": "429:402:1",
              "nodes": [],
              "statements": [
                {
                  "body": {
                    "id": 75,
                    "nodeType": "Block",
                    "src": "486:269:1",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 54,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 47,
                              "name": "retVaults",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 31,
                              "src": "504:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                "typeString": "address[] memory"
                              }
                            },
                            "id": 49,
                            "indexExpression": {
                              "id": 48,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 37,
                              "src": "514:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "504:12:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "arguments": [
                              {
                                "hexValue": "30",
                                "id": 52,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "528:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 51,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "520:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": {
                                "id": 50,
                                "name": "address",
                                "nodeType": "ElementaryTypeName",
                                "src": "520:7:1",
                                "typeDescriptions": {}
                              }
                            },
                            "id": 53,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "520:10:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "504:26:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 73,
                          "nodeType": "Block",
                          "src": "576:169:1",
                          "statements": [
                            {
                              "assignments": [
                                58
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 58,
                                  "mutability": "mutable",
                                  "name": "strategyContract",
                                  "nameLocation": "602:16:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 73,
                                  "src": "594:24:1",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "typeName": {
                                    "id": 57,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "594:7:1",
                                    "stateMutability": "nonpayable",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 66,
                              "initialValue": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "baseExpression": {
                                          "id": 60,
                                          "name": "retVaults",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 31,
                                          "src": "651:9:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                            "typeString": "address[] memory"
                                          }
                                        },
                                        "id": 62,
                                        "indexExpression": {
                                          "id": 61,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 37,
                                          "src": "661:1:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "651:12:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 59,
                                      "name": "IRiveraAutoCompoundingVaultV2",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 832,
                                      "src": "621:29:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_IRiveraAutoCompoundingVaultV2_$832_$",
                                        "typeString": "type(contract IRiveraAutoCompoundingVaultV2)"
                                      }
                                    },
                                    "id": 63,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "621:43:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IRiveraAutoCompoundingVaultV2_$832",
                                      "typeString": "contract IRiveraAutoCompoundingVaultV2"
                                    }
                                  },
                                  "id": 64,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "665:8:1",
                                  "memberName": "strategy",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 809,
                                  "src": "621:52:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                                    "typeString": "function () view external returns (address)"
                                  }
                                },
                                "id": 65,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "621:54:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "594:81:1"
                            },
                            {
                              "expression": {
                                "arguments": [],
                                "expression": {
                                  "argumentTypes": [],
                                  "expression": {
                                    "arguments": [
                                      {
                                        "id": 68,
                                        "name": "strategyContract",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 58,
                                        "src": "703:16:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_address",
                                          "typeString": "address"
                                        }
                                      ],
                                      "id": 67,
                                      "name": "IStrategy",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 989,
                                      "src": "693:9:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_contract$_IStrategy_$989_$",
                                        "typeString": "type(contract IStrategy)"
                                      }
                                    },
                                    "id": 69,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "693:27:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IStrategy_$989",
                                      "typeString": "contract IStrategy"
                                    }
                                  },
                                  "id": 70,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "721:7:1",
                                  "memberName": "harvest",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 919,
                                  "src": "693:35:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                                    "typeString": "function () external"
                                  }
                                },
                                "id": 71,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "693:37:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 72,
                              "nodeType": "ExpressionStatement",
                              "src": "693:37:1"
                            }
                          ]
                        },
                        "id": 74,
                        "nodeType": "IfStatement",
                        "src": "500:245:1",
                        "trueBody": {
                          "id": 56,
                          "nodeType": "Block",
                          "src": "532:38:1",
                          "statements": [
                            {
                              "id": 55,
                              "nodeType": "Break",
                              "src": "550:5:1"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 43,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 40,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 37,
                      "src": "459:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 41,
                        "name": "retVaults",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31,
                        "src": "463:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      },
                      "id": 42,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "473:6:1",
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "463:16:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "459:20:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 76,
                  "initializationExpression": {
                    "assignments": [
                      37
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 37,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "452:1:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 76,
                        "src": "444:9:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 36,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "444:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 39,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 38,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "456:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "444:13:1"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 45,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "481:3:1",
                      "subExpression": {
                        "id": 44,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 37,
                        "src": "481:1:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 46,
                    "nodeType": "ExpressionStatement",
                    "src": "481:3:1"
                  },
                  "nodeType": "ForStatement",
                  "src": "439:316:1"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 79,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "++",
                        "prefix": false,
                        "src": "780:14:1",
                        "subExpression": {
                          "id": 78,
                          "name": "harvestRunId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19,
                          "src": "780:12:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "expression": {
                          "id": 80,
                          "name": "retVaults",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 31,
                          "src": "796:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                            "typeString": "address[] memory"
                          }
                        },
                        "id": 81,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "806:6:1",
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "src": "796:16:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "id": 82,
                        "name": "retVaults",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 31,
                        "src": "814:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[] memory"
                        }
                      ],
                      "id": 77,
                      "name": "HarvestRun",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 28,
                      "src": "769:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_array$_t_address_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (uint256,uint256,address[] memory)"
                      }
                    },
                    "id": 83,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "769:55:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 84,
                  "nodeType": "EmitStatement",
                  "src": "764:60:1"
                }
              ]
            },
            "functionSelector": "ff3407cf",
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 34,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 33,
                  "name": "onlyWhitelisted",
                  "nameLocations": [
                    "413:15:1"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1135,
                  "src": "413:15:1"
                },
                "nodeType": "ModifierInvocation",
                "src": "413:15:1"
              }
            ],
            "name": "harvestVault",
            "nameLocation": "365:12:1",
            "parameters": {
              "id": 32,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 31,
                  "mutability": "mutable",
                  "name": "retVaults",
                  "nameLocation": "395:9:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 86,
                  "src": "378:26:1",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 29,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "378:7:1",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 30,
                    "nodeType": "ArrayTypeName",
                    "src": "378:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "377:28:1"
            },
            "returnParameters": {
              "id": 35,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "429:0:1"
            },
            "scope": 87,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 15,
              "name": "WhitelistFilter",
              "nameLocations": [
                "209:15:1"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1203,
              "src": "209:15:1"
            },
            "id": 16,
            "nodeType": "InheritanceSpecifier",
            "src": "209:15:1"
          }
        ],
        "canonicalName": "Harvester",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          87,
          1203,
          28849,
          29736
        ],
        "name": "Harvester",
        "nameLocation": "196:9:1",
        "scope": 88,
        "usedErrors": []
      }
    ],
    "license": "MIT"
  },
  "id": 1
}